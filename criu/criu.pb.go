// Code generated by protoc-gen-go.
// source: criu.proto
// DO NOT EDIT!

/*
Package criu is a generated protocol buffer package.

It is generated from these files:
	criu.proto

It has these top-level messages:
	CriuPageServerInfo
	CriuVethPair
	ExtMountMap
	InheritFd
	CgroupRoot
	UnixSk
	CriuOpts
	CriuDumpResp
	CriuRestoreResp
	CriuNotify
	CriuFeatures
	CriuReq
	CriuResp
*/
package criu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CriuCgMode int32

const (
	CriuCgMode_IGNORE  CriuCgMode = 0
	CriuCgMode_NONE    CriuCgMode = 1
	CriuCgMode_PROPS   CriuCgMode = 2
	CriuCgMode_SOFT    CriuCgMode = 3
	CriuCgMode_FULL    CriuCgMode = 4
	CriuCgMode_STRICT  CriuCgMode = 5
	CriuCgMode_DEFAULT CriuCgMode = 6
)

var CriuCgMode_name = map[int32]string{
	0: "IGNORE",
	1: "NONE",
	2: "PROPS",
	3: "SOFT",
	4: "FULL",
	5: "STRICT",
	6: "DEFAULT",
}
var CriuCgMode_value = map[string]int32{
	"IGNORE":  0,
	"NONE":    1,
	"PROPS":   2,
	"SOFT":    3,
	"FULL":    4,
	"STRICT":  5,
	"DEFAULT": 6,
}

func (x CriuCgMode) Enum() *CriuCgMode {
	p := new(CriuCgMode)
	*p = x
	return p
}
func (x CriuCgMode) String() string {
	return proto.EnumName(CriuCgMode_name, int32(x))
}
func (x *CriuCgMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CriuCgMode_value, data, "CriuCgMode")
	if err != nil {
		return err
	}
	*x = CriuCgMode(value)
	return nil
}
func (CriuCgMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CriuReqType int32

const (
	CriuReqType_EMPTY         CriuReqType = 0
	CriuReqType_DUMP          CriuReqType = 1
	CriuReqType_RESTORE       CriuReqType = 2
	CriuReqType_CHECK         CriuReqType = 3
	CriuReqType_PRE_DUMP      CriuReqType = 4
	CriuReqType_PAGE_SERVER   CriuReqType = 5
	CriuReqType_NOTIFY        CriuReqType = 6
	CriuReqType_CPUINFO_DUMP  CriuReqType = 7
	CriuReqType_CPUINFO_CHECK CriuReqType = 8
	CriuReqType_FEATURE_CHECK CriuReqType = 9
)

var CriuReqType_name = map[int32]string{
	0: "EMPTY",
	1: "DUMP",
	2: "RESTORE",
	3: "CHECK",
	4: "PRE_DUMP",
	5: "PAGE_SERVER",
	6: "NOTIFY",
	7: "CPUINFO_DUMP",
	8: "CPUINFO_CHECK",
	9: "FEATURE_CHECK",
}
var CriuReqType_value = map[string]int32{
	"EMPTY":         0,
	"DUMP":          1,
	"RESTORE":       2,
	"CHECK":         3,
	"PRE_DUMP":      4,
	"PAGE_SERVER":   5,
	"NOTIFY":        6,
	"CPUINFO_DUMP":  7,
	"CPUINFO_CHECK": 8,
	"FEATURE_CHECK": 9,
}

func (x CriuReqType) Enum() *CriuReqType {
	p := new(CriuReqType)
	*p = x
	return p
}
func (x CriuReqType) String() string {
	return proto.EnumName(CriuReqType_name, int32(x))
}
func (x *CriuReqType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CriuReqType_value, data, "CriuReqType")
	if err != nil {
		return err
	}
	*x = CriuReqType(value)
	return nil
}
func (CriuReqType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CriuPageServerInfo struct {
	Address          *string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Port             *int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	Pid              *int32  `protobuf:"varint,3,opt,name=pid" json:"pid,omitempty"`
	Fd               *int32  `protobuf:"varint,4,opt,name=fd" json:"fd,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CriuPageServerInfo) Reset()                    { *m = CriuPageServerInfo{} }
func (m *CriuPageServerInfo) String() string            { return proto.CompactTextString(m) }
func (*CriuPageServerInfo) ProtoMessage()               {}
func (*CriuPageServerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CriuPageServerInfo) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *CriuPageServerInfo) GetPort() int32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *CriuPageServerInfo) GetPid() int32 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *CriuPageServerInfo) GetFd() int32 {
	if m != nil && m.Fd != nil {
		return *m.Fd
	}
	return 0
}

type CriuVethPair struct {
	IfIn             *string `protobuf:"bytes,1,req,name=if_in,json=ifIn" json:"if_in,omitempty"`
	IfOut            *string `protobuf:"bytes,2,req,name=if_out,json=ifOut" json:"if_out,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CriuVethPair) Reset()                    { *m = CriuVethPair{} }
func (m *CriuVethPair) String() string            { return proto.CompactTextString(m) }
func (*CriuVethPair) ProtoMessage()               {}
func (*CriuVethPair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CriuVethPair) GetIfIn() string {
	if m != nil && m.IfIn != nil {
		return *m.IfIn
	}
	return ""
}

func (m *CriuVethPair) GetIfOut() string {
	if m != nil && m.IfOut != nil {
		return *m.IfOut
	}
	return ""
}

type ExtMountMap struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Val              *string `protobuf:"bytes,2,req,name=val" json:"val,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExtMountMap) Reset()                    { *m = ExtMountMap{} }
func (m *ExtMountMap) String() string            { return proto.CompactTextString(m) }
func (*ExtMountMap) ProtoMessage()               {}
func (*ExtMountMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ExtMountMap) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *ExtMountMap) GetVal() string {
	if m != nil && m.Val != nil {
		return *m.Val
	}
	return ""
}

type InheritFd struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Fd               *int32  `protobuf:"varint,2,req,name=fd" json:"fd,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *InheritFd) Reset()                    { *m = InheritFd{} }
func (m *InheritFd) String() string            { return proto.CompactTextString(m) }
func (*InheritFd) ProtoMessage()               {}
func (*InheritFd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *InheritFd) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *InheritFd) GetFd() int32 {
	if m != nil && m.Fd != nil {
		return *m.Fd
	}
	return 0
}

type CgroupRoot struct {
	Ctrl             *string `protobuf:"bytes,1,opt,name=ctrl" json:"ctrl,omitempty"`
	Path             *string `protobuf:"bytes,2,req,name=path" json:"path,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CgroupRoot) Reset()                    { *m = CgroupRoot{} }
func (m *CgroupRoot) String() string            { return proto.CompactTextString(m) }
func (*CgroupRoot) ProtoMessage()               {}
func (*CgroupRoot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CgroupRoot) GetCtrl() string {
	if m != nil && m.Ctrl != nil {
		return *m.Ctrl
	}
	return ""
}

func (m *CgroupRoot) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

type UnixSk struct {
	Inode            *uint32 `protobuf:"varint,1,req,name=inode" json:"inode,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UnixSk) Reset()                    { *m = UnixSk{} }
func (m *UnixSk) String() string            { return proto.CompactTextString(m) }
func (*UnixSk) ProtoMessage()               {}
func (*UnixSk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UnixSk) GetInode() uint32 {
	if m != nil && m.Inode != nil {
		return *m.Inode
	}
	return 0
}

type CriuOpts struct {
	ImagesDirFd       *int32              `protobuf:"varint,1,req,name=images_dir_fd,json=imagesDirFd" json:"images_dir_fd,omitempty"`
	Pid               *int32              `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	LeaveRunning      *bool               `protobuf:"varint,3,opt,name=leave_running,json=leaveRunning" json:"leave_running,omitempty"`
	ExtUnixSk         *bool               `protobuf:"varint,4,opt,name=ext_unix_sk,json=extUnixSk" json:"ext_unix_sk,omitempty"`
	TcpEstablished    *bool               `protobuf:"varint,5,opt,name=tcp_established,json=tcpEstablished" json:"tcp_established,omitempty"`
	EvasiveDevices    *bool               `protobuf:"varint,6,opt,name=evasive_devices,json=evasiveDevices" json:"evasive_devices,omitempty"`
	ShellJob          *bool               `protobuf:"varint,7,opt,name=shell_job,json=shellJob" json:"shell_job,omitempty"`
	FileLocks         *bool               `protobuf:"varint,8,opt,name=file_locks,json=fileLocks" json:"file_locks,omitempty"`
	LogLevel          *int32              `protobuf:"varint,9,opt,name=log_level,json=logLevel,def=2" json:"log_level,omitempty"`
	LogFile           *string             `protobuf:"bytes,10,opt,name=log_file,json=logFile" json:"log_file,omitempty"`
	Ps                *CriuPageServerInfo `protobuf:"bytes,11,opt,name=ps" json:"ps,omitempty"`
	NotifyScripts     *bool               `protobuf:"varint,12,opt,name=notify_scripts,json=notifyScripts" json:"notify_scripts,omitempty"`
	Root              *string             `protobuf:"bytes,13,opt,name=root" json:"root,omitempty"`
	ParentImg         *string             `protobuf:"bytes,14,opt,name=parent_img,json=parentImg" json:"parent_img,omitempty"`
	TrackMem          *bool               `protobuf:"varint,15,opt,name=track_mem,json=trackMem" json:"track_mem,omitempty"`
	AutoDedup         *bool               `protobuf:"varint,16,opt,name=auto_dedup,json=autoDedup" json:"auto_dedup,omitempty"`
	WorkDirFd         *int32              `protobuf:"varint,17,opt,name=work_dir_fd,json=workDirFd" json:"work_dir_fd,omitempty"`
	LinkRemap         *bool               `protobuf:"varint,18,opt,name=link_remap,json=linkRemap" json:"link_remap,omitempty"`
	Veths             []*CriuVethPair     `protobuf:"bytes,19,rep,name=veths" json:"veths,omitempty"`
	CpuCap            *uint32             `protobuf:"varint,20,opt,name=cpu_cap,json=cpuCap,def=4294967295" json:"cpu_cap,omitempty"`
	ForceIrmap        *bool               `protobuf:"varint,21,opt,name=force_irmap,json=forceIrmap" json:"force_irmap,omitempty"`
	ExecCmd           []string            `protobuf:"bytes,22,rep,name=exec_cmd,json=execCmd" json:"exec_cmd,omitempty"`
	ExtMnt            []*ExtMountMap      `protobuf:"bytes,23,rep,name=ext_mnt,json=extMnt" json:"ext_mnt,omitempty"`
	ManageCgroups     *bool               `protobuf:"varint,24,opt,name=manage_cgroups,json=manageCgroups" json:"manage_cgroups,omitempty"`
	CgRoot            []*CgroupRoot       `protobuf:"bytes,25,rep,name=cg_root,json=cgRoot" json:"cg_root,omitempty"`
	RstSibling        *bool               `protobuf:"varint,26,opt,name=rst_sibling,json=rstSibling" json:"rst_sibling,omitempty"`
	InheritFd         []*InheritFd        `protobuf:"bytes,27,rep,name=inherit_fd,json=inheritFd" json:"inherit_fd,omitempty"`
	AutoExtMnt        *bool               `protobuf:"varint,28,opt,name=auto_ext_mnt,json=autoExtMnt" json:"auto_ext_mnt,omitempty"`
	ExtSharing        *bool               `protobuf:"varint,29,opt,name=ext_sharing,json=extSharing" json:"ext_sharing,omitempty"`
	ExtMasters        *bool               `protobuf:"varint,30,opt,name=ext_masters,json=extMasters" json:"ext_masters,omitempty"`
	SkipMnt           []string            `protobuf:"bytes,31,rep,name=skip_mnt,json=skipMnt" json:"skip_mnt,omitempty"`
	EnableFs          []string            `protobuf:"bytes,32,rep,name=enable_fs,json=enableFs" json:"enable_fs,omitempty"`
	UnixSkIno         []*UnixSk           `protobuf:"bytes,33,rep,name=unix_sk_ino,json=unixSkIno" json:"unix_sk_ino,omitempty"`
	ManageCgroupsMode *CriuCgMode         `protobuf:"varint,34,opt,name=manage_cgroups_mode,json=manageCgroupsMode,enum=CriuCgMode" json:"manage_cgroups_mode,omitempty"`
	GhostLimit        *uint32             `protobuf:"varint,35,opt,name=ghost_limit,json=ghostLimit,def=1048576" json:"ghost_limit,omitempty"`
	IrmapScanPaths    []string            `protobuf:"bytes,36,rep,name=irmap_scan_paths,json=irmapScanPaths" json:"irmap_scan_paths,omitempty"`
	External          []string            `protobuf:"bytes,37,rep,name=external" json:"external,omitempty"`
	EmptyNs           *uint32             `protobuf:"varint,38,opt,name=empty_ns,json=emptyNs" json:"empty_ns,omitempty"`
	NoSeccomp         *bool               `protobuf:"varint,39,opt,name=no_seccomp,json=noSeccomp" json:"no_seccomp,omitempty"`
	XXX_unrecognized  []byte              `json:"-"`
}

func (m *CriuOpts) Reset()                    { *m = CriuOpts{} }
func (m *CriuOpts) String() string            { return proto.CompactTextString(m) }
func (*CriuOpts) ProtoMessage()               {}
func (*CriuOpts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

const Default_CriuOpts_LogLevel int32 = 2
const Default_CriuOpts_CpuCap uint32 = 4294967295
const Default_CriuOpts_GhostLimit uint32 = 1048576

func (m *CriuOpts) GetImagesDirFd() int32 {
	if m != nil && m.ImagesDirFd != nil {
		return *m.ImagesDirFd
	}
	return 0
}

func (m *CriuOpts) GetPid() int32 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *CriuOpts) GetLeaveRunning() bool {
	if m != nil && m.LeaveRunning != nil {
		return *m.LeaveRunning
	}
	return false
}

func (m *CriuOpts) GetExtUnixSk() bool {
	if m != nil && m.ExtUnixSk != nil {
		return *m.ExtUnixSk
	}
	return false
}

func (m *CriuOpts) GetTcpEstablished() bool {
	if m != nil && m.TcpEstablished != nil {
		return *m.TcpEstablished
	}
	return false
}

func (m *CriuOpts) GetEvasiveDevices() bool {
	if m != nil && m.EvasiveDevices != nil {
		return *m.EvasiveDevices
	}
	return false
}

func (m *CriuOpts) GetShellJob() bool {
	if m != nil && m.ShellJob != nil {
		return *m.ShellJob
	}
	return false
}

func (m *CriuOpts) GetFileLocks() bool {
	if m != nil && m.FileLocks != nil {
		return *m.FileLocks
	}
	return false
}

func (m *CriuOpts) GetLogLevel() int32 {
	if m != nil && m.LogLevel != nil {
		return *m.LogLevel
	}
	return Default_CriuOpts_LogLevel
}

func (m *CriuOpts) GetLogFile() string {
	if m != nil && m.LogFile != nil {
		return *m.LogFile
	}
	return ""
}

func (m *CriuOpts) GetPs() *CriuPageServerInfo {
	if m != nil {
		return m.Ps
	}
	return nil
}

func (m *CriuOpts) GetNotifyScripts() bool {
	if m != nil && m.NotifyScripts != nil {
		return *m.NotifyScripts
	}
	return false
}

func (m *CriuOpts) GetRoot() string {
	if m != nil && m.Root != nil {
		return *m.Root
	}
	return ""
}

func (m *CriuOpts) GetParentImg() string {
	if m != nil && m.ParentImg != nil {
		return *m.ParentImg
	}
	return ""
}

func (m *CriuOpts) GetTrackMem() bool {
	if m != nil && m.TrackMem != nil {
		return *m.TrackMem
	}
	return false
}

func (m *CriuOpts) GetAutoDedup() bool {
	if m != nil && m.AutoDedup != nil {
		return *m.AutoDedup
	}
	return false
}

func (m *CriuOpts) GetWorkDirFd() int32 {
	if m != nil && m.WorkDirFd != nil {
		return *m.WorkDirFd
	}
	return 0
}

func (m *CriuOpts) GetLinkRemap() bool {
	if m != nil && m.LinkRemap != nil {
		return *m.LinkRemap
	}
	return false
}

func (m *CriuOpts) GetVeths() []*CriuVethPair {
	if m != nil {
		return m.Veths
	}
	return nil
}

func (m *CriuOpts) GetCpuCap() uint32 {
	if m != nil && m.CpuCap != nil {
		return *m.CpuCap
	}
	return Default_CriuOpts_CpuCap
}

func (m *CriuOpts) GetForceIrmap() bool {
	if m != nil && m.ForceIrmap != nil {
		return *m.ForceIrmap
	}
	return false
}

func (m *CriuOpts) GetExecCmd() []string {
	if m != nil {
		return m.ExecCmd
	}
	return nil
}

func (m *CriuOpts) GetExtMnt() []*ExtMountMap {
	if m != nil {
		return m.ExtMnt
	}
	return nil
}

func (m *CriuOpts) GetManageCgroups() bool {
	if m != nil && m.ManageCgroups != nil {
		return *m.ManageCgroups
	}
	return false
}

func (m *CriuOpts) GetCgRoot() []*CgroupRoot {
	if m != nil {
		return m.CgRoot
	}
	return nil
}

func (m *CriuOpts) GetRstSibling() bool {
	if m != nil && m.RstSibling != nil {
		return *m.RstSibling
	}
	return false
}

func (m *CriuOpts) GetInheritFd() []*InheritFd {
	if m != nil {
		return m.InheritFd
	}
	return nil
}

func (m *CriuOpts) GetAutoExtMnt() bool {
	if m != nil && m.AutoExtMnt != nil {
		return *m.AutoExtMnt
	}
	return false
}

func (m *CriuOpts) GetExtSharing() bool {
	if m != nil && m.ExtSharing != nil {
		return *m.ExtSharing
	}
	return false
}

func (m *CriuOpts) GetExtMasters() bool {
	if m != nil && m.ExtMasters != nil {
		return *m.ExtMasters
	}
	return false
}

func (m *CriuOpts) GetSkipMnt() []string {
	if m != nil {
		return m.SkipMnt
	}
	return nil
}

func (m *CriuOpts) GetEnableFs() []string {
	if m != nil {
		return m.EnableFs
	}
	return nil
}

func (m *CriuOpts) GetUnixSkIno() []*UnixSk {
	if m != nil {
		return m.UnixSkIno
	}
	return nil
}

func (m *CriuOpts) GetManageCgroupsMode() CriuCgMode {
	if m != nil && m.ManageCgroupsMode != nil {
		return *m.ManageCgroupsMode
	}
	return CriuCgMode_IGNORE
}

func (m *CriuOpts) GetGhostLimit() uint32 {
	if m != nil && m.GhostLimit != nil {
		return *m.GhostLimit
	}
	return Default_CriuOpts_GhostLimit
}

func (m *CriuOpts) GetIrmapScanPaths() []string {
	if m != nil {
		return m.IrmapScanPaths
	}
	return nil
}

func (m *CriuOpts) GetExternal() []string {
	if m != nil {
		return m.External
	}
	return nil
}

func (m *CriuOpts) GetEmptyNs() uint32 {
	if m != nil && m.EmptyNs != nil {
		return *m.EmptyNs
	}
	return 0
}

func (m *CriuOpts) GetNoSeccomp() bool {
	if m != nil && m.NoSeccomp != nil {
		return *m.NoSeccomp
	}
	return false
}

type CriuDumpResp struct {
	Restored         *bool  `protobuf:"varint,1,opt,name=restored" json:"restored,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CriuDumpResp) Reset()                    { *m = CriuDumpResp{} }
func (m *CriuDumpResp) String() string            { return proto.CompactTextString(m) }
func (*CriuDumpResp) ProtoMessage()               {}
func (*CriuDumpResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CriuDumpResp) GetRestored() bool {
	if m != nil && m.Restored != nil {
		return *m.Restored
	}
	return false
}

type CriuRestoreResp struct {
	Pid              *int32 `protobuf:"varint,1,req,name=pid" json:"pid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CriuRestoreResp) Reset()                    { *m = CriuRestoreResp{} }
func (m *CriuRestoreResp) String() string            { return proto.CompactTextString(m) }
func (*CriuRestoreResp) ProtoMessage()               {}
func (*CriuRestoreResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CriuRestoreResp) GetPid() int32 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

type CriuNotify struct {
	Script           *string `protobuf:"bytes,1,opt,name=script" json:"script,omitempty"`
	Pid              *int32  `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CriuNotify) Reset()                    { *m = CriuNotify{} }
func (m *CriuNotify) String() string            { return proto.CompactTextString(m) }
func (*CriuNotify) ProtoMessage()               {}
func (*CriuNotify) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CriuNotify) GetScript() string {
	if m != nil && m.Script != nil {
		return *m.Script
	}
	return ""
}

func (m *CriuNotify) GetPid() int32 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

//
// List of features which can queried via
// CRIU_REQ_TYPE__FEATURE_CHECK
type CriuFeatures struct {
	MemTrack         *bool  `protobuf:"varint,1,opt,name=mem_track,json=memTrack" json:"mem_track,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CriuFeatures) Reset()                    { *m = CriuFeatures{} }
func (m *CriuFeatures) String() string            { return proto.CompactTextString(m) }
func (*CriuFeatures) ProtoMessage()               {}
func (*CriuFeatures) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CriuFeatures) GetMemTrack() bool {
	if m != nil && m.MemTrack != nil {
		return *m.MemTrack
	}
	return false
}

type CriuReq struct {
	Type          *CriuReqType `protobuf:"varint,1,req,name=type,enum=CriuReqType" json:"type,omitempty"`
	Opts          *CriuOpts    `protobuf:"bytes,2,opt,name=opts" json:"opts,omitempty"`
	NotifySuccess *bool        `protobuf:"varint,3,opt,name=notify_success,json=notifySuccess" json:"notify_success,omitempty"`
	//
	// When set service won't close the connection but
	// will wait for more req-s to appear. Works not
	// for all request types.
	KeepOpen *bool `protobuf:"varint,4,opt,name=keep_open,json=keepOpen" json:"keep_open,omitempty"`
	//
	// 'features' can be used to query which features
	// are supported by the installed criu/kernel
	// via RPC.
	Features         *CriuFeatures `protobuf:"bytes,5,opt,name=features" json:"features,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *CriuReq) Reset()                    { *m = CriuReq{} }
func (m *CriuReq) String() string            { return proto.CompactTextString(m) }
func (*CriuReq) ProtoMessage()               {}
func (*CriuReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CriuReq) GetType() CriuReqType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CriuReqType_EMPTY
}

func (m *CriuReq) GetOpts() *CriuOpts {
	if m != nil {
		return m.Opts
	}
	return nil
}

func (m *CriuReq) GetNotifySuccess() bool {
	if m != nil && m.NotifySuccess != nil {
		return *m.NotifySuccess
	}
	return false
}

func (m *CriuReq) GetKeepOpen() bool {
	if m != nil && m.KeepOpen != nil {
		return *m.KeepOpen
	}
	return false
}

func (m *CriuReq) GetFeatures() *CriuFeatures {
	if m != nil {
		return m.Features
	}
	return nil
}

type CriuResp struct {
	Type             *CriuReqType        `protobuf:"varint,1,req,name=type,enum=CriuReqType" json:"type,omitempty"`
	Success          *bool               `protobuf:"varint,2,req,name=success" json:"success,omitempty"`
	Dump             *CriuDumpResp       `protobuf:"bytes,3,opt,name=dump" json:"dump,omitempty"`
	Restore          *CriuRestoreResp    `protobuf:"bytes,4,opt,name=restore" json:"restore,omitempty"`
	Notify           *CriuNotify         `protobuf:"bytes,5,opt,name=notify" json:"notify,omitempty"`
	Ps               *CriuPageServerInfo `protobuf:"bytes,6,opt,name=ps" json:"ps,omitempty"`
	CrErrno          *int32              `protobuf:"varint,7,opt,name=cr_errno,json=crErrno" json:"cr_errno,omitempty"`
	Features         *CriuFeatures       `protobuf:"bytes,8,opt,name=features" json:"features,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *CriuResp) Reset()                    { *m = CriuResp{} }
func (m *CriuResp) String() string            { return proto.CompactTextString(m) }
func (*CriuResp) ProtoMessage()               {}
func (*CriuResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CriuResp) GetType() CriuReqType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CriuReqType_EMPTY
}

func (m *CriuResp) GetSuccess() bool {
	if m != nil && m.Success != nil {
		return *m.Success
	}
	return false
}

func (m *CriuResp) GetDump() *CriuDumpResp {
	if m != nil {
		return m.Dump
	}
	return nil
}

func (m *CriuResp) GetRestore() *CriuRestoreResp {
	if m != nil {
		return m.Restore
	}
	return nil
}

func (m *CriuResp) GetNotify() *CriuNotify {
	if m != nil {
		return m.Notify
	}
	return nil
}

func (m *CriuResp) GetPs() *CriuPageServerInfo {
	if m != nil {
		return m.Ps
	}
	return nil
}

func (m *CriuResp) GetCrErrno() int32 {
	if m != nil && m.CrErrno != nil {
		return *m.CrErrno
	}
	return 0
}

func (m *CriuResp) GetFeatures() *CriuFeatures {
	if m != nil {
		return m.Features
	}
	return nil
}

func init() {
	proto.RegisterType((*CriuPageServerInfo)(nil), "criu_page_server_info")
	proto.RegisterType((*CriuVethPair)(nil), "criu_veth_pair")
	proto.RegisterType((*ExtMountMap)(nil), "ext_mount_map")
	proto.RegisterType((*InheritFd)(nil), "inherit_fd")
	proto.RegisterType((*CgroupRoot)(nil), "cgroup_root")
	proto.RegisterType((*UnixSk)(nil), "unix_sk")
	proto.RegisterType((*CriuOpts)(nil), "criu_opts")
	proto.RegisterType((*CriuDumpResp)(nil), "criu_dump_resp")
	proto.RegisterType((*CriuRestoreResp)(nil), "criu_restore_resp")
	proto.RegisterType((*CriuNotify)(nil), "criu_notify")
	proto.RegisterType((*CriuFeatures)(nil), "criu_features")
	proto.RegisterType((*CriuReq)(nil), "criu_req")
	proto.RegisterType((*CriuResp)(nil), "criu_resp")
	proto.RegisterEnum("CriuCgMode", CriuCgMode_name, CriuCgMode_value)
	proto.RegisterEnum("CriuReqType", CriuReqType_name, CriuReqType_value)
}

func init() { proto.RegisterFile("criu.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0xef, 0x6e, 0x63, 0x39,
	0x15, 0xc0, 0x49, 0x9a, 0x3f, 0x37, 0xe7, 0x26, 0x69, 0xea, 0xd9, 0x19, 0x3c, 0x3b, 0xb4, 0x0d,
	0xe9, 0x76, 0x37, 0xaa, 0x46, 0x11, 0x84, 0x99, 0x1d, 0x66, 0x05, 0x1f, 0x46, 0x6d, 0xb2, 0x04,
	0xda, 0x26, 0x72, 0x52, 0xa4, 0x95, 0x90, 0xac, 0xdb, 0x7b, 0x9d, 0xd4, 0xe4, 0xfe, 0xc3, 0x76,
	0x42, 0xfb, 0x34, 0x3c, 0x03, 0x2f, 0xc0, 0x57, 0x5e, 0x0b, 0x1d, 0xfb, 0xa6, 0xd3, 0x6a, 0x57,
	0xc0, 0x37, 0xfb, 0xe7, 0x63, 0x9f, 0x7f, 0x3e, 0xe7, 0x00, 0x84, 0x4a, 0x6e, 0x06, 0xb9, 0xca,
	0x4c, 0xd6, 0x5b, 0xc1, 0x4b, 0xdc, 0xf1, 0x3c, 0x58, 0x09, 0xae, 0x85, 0xda, 0x0a, 0xc5, 0x65,
	0xba, 0xcc, 0x08, 0x85, 0x7a, 0x10, 0x45, 0x4a, 0x68, 0x4d, 0x4b, 0xdd, 0x52, 0xbf, 0xc1, 0x76,
	0x5b, 0x42, 0xa0, 0x92, 0x67, 0xca, 0xd0, 0x72, 0xb7, 0xd4, 0xaf, 0x32, 0xbb, 0x26, 0x1d, 0xd8,
	0xcb, 0x65, 0x44, 0xf7, 0x2c, 0xc2, 0x25, 0x69, 0x43, 0x79, 0x19, 0xd1, 0x8a, 0x05, 0xe5, 0x65,
	0xd4, 0xfb, 0x1d, 0xb4, 0xad, 0xa2, 0xad, 0x30, 0x77, 0x3c, 0x0f, 0xa4, 0x22, 0x2f, 0xa0, 0x2a,
	0x97, 0x5c, 0xa6, 0xb4, 0xd4, 0x2d, 0xf7, 0x1b, 0xac, 0x22, 0x97, 0x93, 0x94, 0xbc, 0x84, 0x9a,
	0x5c, 0xf2, 0x6c, 0x83, 0xcf, 0x23, 0xad, 0xca, 0xe5, 0x74, 0x63, 0x7a, 0xbf, 0x81, 0x96, 0xb8,
	0x37, 0x3c, 0xc9, 0x36, 0xa9, 0xe1, 0x49, 0x90, 0xa3, 0xc2, 0xb5, 0x78, 0x28, 0xae, 0xe2, 0x12,
	0xc9, 0x36, 0x88, 0x8b, 0x6b, 0xb8, 0xec, 0x0d, 0x00, 0x64, 0x7a, 0x27, 0x94, 0x34, 0x7c, 0x19,
	0xfd, 0xc4, 0x0d, 0x67, 0x22, 0x5e, 0x70, 0x26, 0xbe, 0x07, 0x3f, 0x5c, 0xa9, 0x6c, 0x93, 0x73,
	0x95, 0x65, 0x06, 0xfd, 0x0c, 0x8d, 0x8a, 0x0b, 0xf7, 0xed, 0xda, 0xfa, 0x1e, 0x98, 0xbb, 0x42,
	0x8b, 0x5d, 0xf7, 0x8e, 0xa1, 0xbe, 0x49, 0xe5, 0x3d, 0xd7, 0x6b, 0xf2, 0x05, 0x54, 0x65, 0x9a,
	0x45, 0xc2, 0x6a, 0x69, 0x31, 0xb7, 0xe9, 0xfd, 0x1b, 0xa0, 0x61, 0x7d, 0xcf, 0x72, 0xa3, 0x49,
	0x0f, 0x5a, 0x32, 0x09, 0x56, 0x42, 0xf3, 0x48, 0x2a, 0xbe, 0x8c, 0xac, 0x6c, 0x95, 0xf9, 0x0e,
	0x5e, 0x48, 0x35, 0x8e, 0x76, 0xe1, 0x2c, 0x7f, 0x0e, 0xe7, 0x09, 0xb4, 0x62, 0x11, 0x6c, 0x05,
	0x57, 0x9b, 0x34, 0x95, 0xe9, 0xca, 0x86, 0xda, 0x63, 0x4d, 0x0b, 0x99, 0x63, 0xe4, 0x08, 0x7c,
	0x8c, 0x52, 0x61, 0x8d, 0x0d, 0xbe, 0xc7, 0x1a, 0xe2, 0xde, 0xdc, 0xa4, 0xf2, 0x7e, 0xbe, 0x26,
	0xdf, 0xc0, 0xbe, 0x09, 0x73, 0x2e, 0xb4, 0x09, 0x6e, 0x63, 0xa9, 0xef, 0x44, 0x44, 0xab, 0x56,
	0xa6, 0x6d, 0xc2, 0x7c, 0xf4, 0x99, 0xa2, 0xa0, 0xd8, 0x06, 0x5a, 0x6e, 0x05, 0x8f, 0xc4, 0x56,
	0x86, 0x42, 0xd3, 0x9a, 0x13, 0x2c, 0xf0, 0x85, 0xa3, 0xe4, 0x0d, 0x34, 0xf4, 0x9d, 0x88, 0x63,
	0xfe, 0xd7, 0xec, 0x96, 0xd6, 0xad, 0x88, 0x67, 0xc1, 0x1f, 0xb3, 0x5b, 0x72, 0x08, 0xb0, 0x94,
	0xb1, 0xe0, 0x71, 0x16, 0xae, 0x35, 0xf5, 0x9c, 0x35, 0x48, 0x2e, 0x11, 0x90, 0x23, 0x68, 0xc4,
	0xd9, 0x8a, 0xc7, 0x62, 0x2b, 0x62, 0xda, 0x40, 0x57, 0xbf, 0x2b, 0x0d, 0x99, 0x17, 0x67, 0xab,
	0x4b, 0x44, 0xe4, 0x35, 0xe0, 0x9a, 0xe3, 0x05, 0x0a, 0xee, 0x0b, 0xc6, 0xd9, 0x6a, 0x2c, 0x63,
	0x41, 0xbe, 0x86, 0x72, 0xae, 0xa9, 0xdf, 0x2d, 0xf5, 0xfd, 0xe1, 0xab, 0xc1, 0x4f, 0x7e, 0x60,
	0x56, 0xce, 0x35, 0x39, 0x85, 0x76, 0x9a, 0x19, 0xb9, 0x7c, 0xe0, 0x3a, 0x54, 0x32, 0x37, 0x9a,
	0x36, 0xad, 0x15, 0x2d, 0x47, 0xe7, 0x0e, 0x62, 0x56, 0x31, 0xe3, 0xb4, 0xe5, 0x32, 0x6d, 0xb3,
	0x7f, 0x08, 0x90, 0x07, 0x4a, 0xa4, 0x86, 0xcb, 0x64, 0x45, 0xdb, 0xf6, 0xa4, 0xe1, 0xc8, 0x24,
	0x59, 0xa1, 0xe3, 0x46, 0x05, 0xe1, 0x9a, 0x27, 0x22, 0xa1, 0xfb, 0xce, 0x71, 0x0b, 0xae, 0x44,
	0x82, 0x77, 0x83, 0x8d, 0xc9, 0x78, 0x24, 0xa2, 0x4d, 0x4e, 0x3b, 0xce, 0x71, 0x24, 0x17, 0x08,
	0x30, 0x4d, 0x7f, 0xcf, 0xd4, 0x7a, 0x97, 0xff, 0x03, 0x9b, 0xe5, 0x06, 0x22, 0x97, 0xfd, 0x43,
	0x80, 0x58, 0xa6, 0x6b, 0xae, 0x44, 0x12, 0xe4, 0x94, 0xb8, 0xeb, 0x48, 0x18, 0x02, 0x72, 0x0a,
	0x55, 0x2c, 0x22, 0x4d, 0x5f, 0x74, 0xf7, 0xfa, 0xfe, 0x70, 0x7f, 0xf0, 0xbc, 0xae, 0x98, 0x3b,
	0x25, 0x27, 0x50, 0x0f, 0xf3, 0x0d, 0x0f, 0x83, 0x9c, 0x7e, 0xd1, 0x2d, 0xf5, 0x5b, 0xdf, 0xc1,
	0xbb, 0xe1, 0xc7, 0x77, 0x1f, 0xbf, 0xfd, 0x30, 0xfc, 0xf8, 0x9e, 0xd5, 0xc2, 0x7c, 0x73, 0x1e,
	0xe4, 0xe4, 0x18, 0xfc, 0x65, 0xa6, 0x42, 0xc1, 0xa5, 0x42, 0x5d, 0x2f, 0xad, 0x2e, 0xb0, 0x68,
	0x82, 0x04, 0x93, 0x20, 0xee, 0x45, 0xc8, 0xc3, 0x24, 0xa2, 0xaf, 0xba, 0x7b, 0x98, 0x04, 0xdc,
	0x9f, 0x27, 0xf8, 0x49, 0xea, 0xb6, 0x26, 0x53, 0x43, 0x7f, 0x6e, 0x2d, 0x69, 0x0f, 0x9e, 0xd5,
	0x28, 0xab, 0x89, 0x7b, 0x73, 0x95, 0x1a, 0xcc, 0x42, 0x12, 0xa4, 0x98, 0x1f, 0x57, 0x5e, 0x9a,
	0x52, 0x97, 0x05, 0x47, 0xcf, 0x1d, 0x24, 0xa7, 0x50, 0x0f, 0x57, 0xb6, 0xf4, 0xe8, 0x6b, 0xfb,
	0x5e, 0x73, 0xf0, 0xa4, 0x1c, 0x59, 0x2d, 0x5c, 0x31, 0x4c, 0xcc, 0x31, 0xf8, 0x4a, 0x1b, 0xae,
	0xe5, 0x6d, 0x8c, 0x75, 0xf0, 0xa5, 0x33, 0x59, 0x69, 0x33, 0x77, 0x84, 0x9c, 0x3d, 0x2d, 0x7b,
	0xfa, 0xc6, 0x3e, 0xe5, 0x0f, 0x3e, 0x23, 0xd6, 0x28, 0xd6, 0xe3, 0x88, 0x74, 0xa1, 0x69, 0x33,
	0xb5, 0x73, 0xe4, 0x17, 0xee, 0x35, 0x64, 0x23, 0x67, 0xfc, 0xb1, 0xab, 0x29, 0x7d, 0x17, 0x28,
	0x54, 0x77, 0xe8, 0x04, 0xc4, 0xbd, 0x99, 0x3b, 0xb2, 0x13, 0x48, 0x02, 0x6d, 0x84, 0xd2, 0xf4,
	0xe8, 0x51, 0xe0, 0xca, 0x11, 0x0c, 0xa1, 0x5e, 0xcb, 0xdc, 0xbe, 0x7f, 0xec, 0x42, 0x88, 0x7b,
	0x7c, 0xfc, 0x0d, 0x34, 0x44, 0x1a, 0xdc, 0xc6, 0x82, 0x2f, 0x35, 0xed, 0xda, 0x33, 0xcf, 0x81,
	0xb1, 0x26, 0x7d, 0xf0, 0x8b, 0x4a, 0xe6, 0x32, 0xcd, 0xe8, 0x2f, 0xad, 0x23, 0xde, 0xa0, 0x60,
	0xac, 0xb1, 0xb1, 0x45, 0x3d, 0x49, 0x33, 0xf2, 0x7b, 0x78, 0xf1, 0x3c, 0xc0, 0x3c, 0xc1, 0x26,
	0xd4, 0xeb, 0x96, 0xfa, 0xed, 0x61, 0xcb, 0xfd, 0x8f, 0x70, 0x65, 0x21, 0x3b, 0x78, 0x16, 0xf4,
	0xab, 0x2c, 0x12, 0xa8, 0x68, 0x75, 0x97, 0x69, 0xc3, 0x63, 0x99, 0x48, 0x43, 0x4f, 0xec, 0x6f,
	0xa9, 0xff, 0xfa, 0x57, 0xef, 0x7e, 0xfb, 0xfe, 0xc3, 0xb7, 0x0c, 0xec, 0xd9, 0x25, 0x1e, 0x91,
	0x3e, 0x74, 0xec, 0x47, 0xe1, 0x3a, 0x0c, 0x52, 0x8e, 0xdd, 0x4f, 0xd3, 0xaf, 0xac, 0xd9, 0x6d,
	0xcb, 0xe7, 0x61, 0x90, 0xce, 0x90, 0x92, 0x2f, 0xf1, 0xdf, 0x18, 0xa1, 0xd2, 0x20, 0xa6, 0xa7,
	0x85, 0x63, 0xc5, 0xde, 0xfe, 0xa9, 0x24, 0x37, 0x0f, 0x3c, 0xd5, 0xf4, 0x6b, 0x54, 0xc6, 0xea,
	0x76, 0x7f, 0xad, 0xf1, 0xeb, 0xa7, 0x19, 0xd7, 0x22, 0x0c, 0xb3, 0x24, 0xa7, 0xdf, 0xb8, 0xaf,
	0x9f, 0x66, 0x73, 0x07, 0x7a, 0x6f, 0x8b, 0x21, 0x12, 0x6d, 0x92, 0x9c, 0x2b, 0xa1, 0x73, 0xd4,
	0xa3, 0x84, 0x36, 0x99, 0x12, 0x91, 0x6d, 0xd4, 0x1e, 0x7b, 0xdc, 0xf7, 0x4e, 0xe1, 0xc0, 0x4a,
	0x17, 0xc0, 0x5d, 0x28, 0x5a, 0xab, 0x6b, 0xba, 0xb8, 0xec, 0x7d, 0x00, 0xdf, 0x8a, 0xb9, 0x9e,
	0x40, 0x5e, 0x41, 0xcd, 0x35, 0x8b, 0xa2, 0xf1, 0x17, 0xbb, 0x1f, 0xf7, 0xe4, 0xde, 0x5b, 0x68,
	0xd9, 0x8b, 0x4b, 0x11, 0x98, 0x8d, 0x72, 0xdd, 0x30, 0x11, 0x09, 0xb7, 0x7d, 0x60, 0x67, 0x4d,
	0x22, 0x92, 0x05, 0xee, 0x7b, 0xff, 0x2a, 0x81, 0x57, 0x98, 0xf3, 0x37, 0xd2, 0x83, 0x8a, 0x79,
	0xc8, 0xdd, 0x9c, 0x68, 0x0f, 0xdb, 0x83, 0xdd, 0x01, 0x47, 0xca, 0xec, 0x19, 0x39, 0x82, 0x0a,
	0x0e, 0x0c, 0xab, 0xd1, 0x1f, 0xc2, 0xe0, 0x71, 0x84, 0x30, 0xcb, 0x9f, 0x36, 0xb7, 0x4d, 0x18,
	0xe2, 0xa0, 0xde, 0x7b, 0xd6, 0xdc, 0x1c, 0x44, 0xa3, 0xd6, 0x42, 0xe4, 0x3c, 0xcb, 0x45, 0x5a,
	0x8c, 0x04, 0x0f, 0xc1, 0x34, 0x17, 0x29, 0x39, 0x03, 0x6f, 0x67, 0xbd, 0x1d, 0x05, 0xfe, 0xce,
	0x96, 0x1d, 0x65, 0x8f, 0xe7, 0xbd, 0x7f, 0x96, 0x8b, 0x31, 0x66, 0xe3, 0xf8, 0xff, 0x78, 0x40,
	0xa1, 0xbe, 0x33, 0x0d, 0x07, 0xa6, 0xc7, 0x76, 0x5b, 0x72, 0x02, 0x15, 0xcc, 0xa1, 0xb5, 0xf8,
	0xb1, 0x85, 0x3d, 0x66, 0x95, 0xd9, 0x43, 0xf2, 0x16, 0xea, 0x45, 0xea, 0xac, 0xdd, 0xfe, 0x90,
	0x0c, 0x7e, 0x94, 0x4f, 0xb6, 0x13, 0x21, 0x5f, 0x41, 0xcd, 0x39, 0x5e, 0x38, 0xd2, 0x1c, 0x3c,
	0xc9, 0x2a, 0x2b, 0xce, 0x8a, 0xc9, 0x51, 0xfb, 0x9f, 0x93, 0xe3, 0x35, 0x26, 0x8b, 0x0b, 0xa5,
	0xd2, 0xcc, 0xce, 0xb5, 0x2a, 0xab, 0x87, 0x6a, 0x84, 0xdb, 0x67, 0x31, 0xf3, 0xfe, 0x7b, 0xcc,
	0xce, 0xfe, 0x02, 0xcd, 0xa7, 0xd5, 0x47, 0x00, 0x6a, 0x93, 0xef, 0xaf, 0xa7, 0x6c, 0xd4, 0xf9,
	0x19, 0xf1, 0xa0, 0x72, 0x3d, 0xbd, 0x1e, 0x75, 0x4a, 0xa4, 0x01, 0xd5, 0x19, 0x9b, 0xce, 0xe6,
	0x9d, 0x32, 0xc2, 0xf9, 0x74, 0xbc, 0xe8, 0xec, 0xe1, 0x6a, 0x7c, 0x73, 0x79, 0xd9, 0xa9, 0xe0,
	0xa5, 0xf9, 0x82, 0x4d, 0xce, 0x17, 0x9d, 0x2a, 0xf1, 0xa1, 0x7e, 0x31, 0x1a, 0x7f, 0xba, 0xb9,
	0x5c, 0x74, 0x6a, 0x67, 0xff, 0x28, 0x15, 0x3f, 0x70, 0x17, 0x77, 0x7c, 0x69, 0x74, 0x35, 0x5b,
	0xfc, 0xe0, 0x9e, 0xbf, 0xb8, 0xb9, 0x9a, 0x75, 0x4a, 0x78, 0x87, 0x8d, 0xe6, 0x0b, 0xd4, 0x5a,
	0x46, 0x89, 0xf3, 0x3f, 0x8c, 0xce, 0xff, 0xd4, 0xd9, 0x23, 0x4d, 0xf0, 0x66, 0x6c, 0xc4, 0xad,
	0x54, 0x85, 0xec, 0x83, 0x3f, 0xfb, 0xf4, 0xfd, 0x88, 0xcf, 0x47, 0xec, 0xcf, 0x23, 0xd6, 0xa9,
	0xa2, 0xda, 0xeb, 0xe9, 0x62, 0x32, 0xfe, 0xa1, 0x53, 0x23, 0x1d, 0x68, 0x9e, 0xcf, 0x6e, 0x26,
	0xd7, 0xe3, 0xa9, 0x13, 0xaf, 0x93, 0x03, 0x68, 0xed, 0x88, 0x7b, 0xcf, 0x43, 0x34, 0x1e, 0x7d,
	0x5a, 0xdc, 0xb0, 0x51, 0x81, 0x1a, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xa6, 0xbc, 0x62, 0x13,
	0x6b, 0x0a, 0x00, 0x00,
}
